#!/usr/bin/env python3
"""
Verifica si el sistema puede ejecutar YAMNet real
"""

import sys
import subprocess
import importlib

import logging

# Configuraci√≥n de logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', stream=sys.stderr)

def check_python_version():
    """Verifica la versi√≥n de Python"""
    version = sys.version_info
    logging.info(f"üêç Python: {version.major}.{version.minor}.{version.micro}")
    
    if version.major == 3 and 8 <= version.minor <= 11:
        logging.info("‚úÖ Versi√≥n de Python compatible con TensorFlow")
        return True
    else:
        logging.error("‚ùå Versi√≥n de Python no compatible (necesita 3.8-3.11)")
        return False

def check_tensorflow():
    """Verifica TensorFlow"""
    try:
        import tensorflow as tf
        logging.info(f"‚úÖ TensorFlow: {tf.__version__}")
        
        # Verificar GPU
        gpus = tf.config.list_physical_devices('GPU')
        if gpus:
            logging.info(f"üöÄ GPU disponible: {len(gpus)} dispositivos")
            for i, gpu in enumerate(gpus):
                logging.info(f"   GPU {i}: {gpu.name}")
        else:
            logging.info("üíª Solo CPU disponible (m√°s lento)")
        
        return True
    except ImportError:
        logging.error("‚ùå TensorFlow no instalado")
        return False

def check_tensorflow_hub():
    """Verifica TensorFlow Hub"""
    try:
        import tensorflow_hub as hub
        logging.info(f"‚úÖ TensorFlow Hub disponible")
        return True
    except ImportError:
        logging.error("‚ùå TensorFlow Hub no instalado")
        return False

def check_audio_libraries():
    """Verifica librer√≠as de audio"""
    libraries = {
        'librosa': 'Procesamiento de audio',
        'soundfile': 'Lectura/escritura de archivos de audio',
        'resampy': 'Remuestreo de audio (opcional)',
    }
    
    all_available = True
    for lib, description in libraries.items():
        try:
            importlib.import_module(lib)
            logging.info(f"‚úÖ {lib}: {description}")
        except ImportError:
            logging.error(f"‚ùå {lib}: {description} - NO INSTALADO")
            all_available = False
    
    return all_available

def check_disk_space():
    """Verifica espacio en disco"""
    import shutil
    total, used, free = shutil.disk_usage('/')
    free_gb = free // (1024**3)
    logging.info(f"üíæ Espacio libre: {free_gb} GB")
    
    if free_gb >= 2:
        logging.info("‚úÖ Suficiente espacio para modelo YAMNet (~500MB)")
        return True
    else:
        logging.error("‚ùå Poco espacio en disco")
        return False

def check_internet():
    """Verifica conexi√≥n a internet"""
    try:
        import urllib.request
        urllib.request.urlopen('https://tfhub.dev', timeout=5)
        logging.info("‚úÖ Conexi√≥n a TensorFlow Hub disponible")
        return True
    except:
        logging.error("‚ùå Sin conexi√≥n a TensorFlow Hub")
        return False

def estimate_processing_time():
    """Estima tiempo de procesamiento"""
    logging.info(f"\n‚è±Ô∏è  Estimaci√≥n de Tiempos (31,954 segmentos):")
    logging.info(f"  üíª Solo CPU: ~8-12 horas")
    logging.info(f"  üöÄ Con GPU: ~2-4 horas")
    logging.info(f"  üìä Dependiente de duraci√≥n promedio de segmentos")

def print_installation_instructions():
    """Imprime instrucciones de instalaci√≥n"""
    logging.info(f"\nüîß Instrucciones de Instalaci√≥n:")
    logging.info(f"""
# Instalar TensorFlow (CPU)
pip install tensorflow

# Instalar TensorFlow (GPU) - requiere CUDA
pip install tensorflow-gpu

# Instalar TensorFlow Hub
pip install tensorflow-hub

# Instalar librer√≠as de audio
pip install librosa soundfile resampy

# Verificar instalaci√≥n
python -c "import tensorflow as tf; print(tf.__version__)"
python -c "import tensorflow_hub as hub; print('TF Hub OK')"
""")

def main():
    logging.info("üîç Verificaci√≥n de Requisitos para YAMNet Real")
    logging.info("=" * 50)
    
    all_good = True
    
    # Verificaciones
    all_good &= check_python_version()
    all_good &= check_tensorflow()
    all_good &= check_tensorflow_hub()
    all_good &= check_audio_libraries()
    all_good &= check_disk_space()
    all_good &= check_internet()
    
    estimate_processing_time()
    
    logging.info(f"\nüìä RESUMEN:")
    if all_good:
        logging.info("‚úÖ Sistema listo para YAMNet real")
        logging.info("üöÄ Puedes proceder con la generaci√≥n de embeddings reales")
    else:
        logging.error("‚ùå Faltan requisitos para YAMNet real")
        print_installation_instructions()
    
    return all_good


if __name__ == "__main__":
    main()